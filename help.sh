#!/bin/bash

echo "===== Service Mesh Demo Help ====="
echo "This project demonstrates a simple service mesh setup using Istio on Kubernetes (Minikube)."
echo "It includes two microservices that communicate with each other using Kubernetes service discovery."
echo ""
echo "Available Scripts:"
echo ""
echo "1. deploy.sh"
echo "   Purpose: Deploy the applications to Minikube"
echo "   Usage: ./deploy.sh"
echo ""
echo "2. cleanup.sh"
echo "   Purpose: Clean up the demo resources"
echo "   Usage: ./cleanup.sh"
echo ""
echo "3. gke-setup.sh"
echo "   Purpose: Deploy the demo to Google Kubernetes Engine"
echo "   Usage: ./gke-setup.sh -p YOUR_GCP_PROJECT_ID"
echo "   Options:"
echo "     -p PROJECT_ID     : GCP Project ID (required)"
echo "     -n CLUSTER_NAME   : GKE cluster name (default: servicemesh-demo)"
echo "     -z CLUSTER_ZONE   : GKE cluster zone (default: us-central1-a)"
echo ""
echo "4. update-version.sh"
echo "   Purpose: Update service versions and implement traffic splitting"
echo "   Usage: ./update-version.sh -a app1 -v v2 -w 20 -d"
echo "   Options:"
echo "     -a APP     : Application to update (app1 or app2) (required)"
echo "     -v VERSION : New version (e.g., v2, v3) (required)"
echo "     -w WEIGHT  : Traffic weight for the new version (0-100, default: 0)"
echo "     -d         : Deploy the new version (default: false, just creates the files)"
echo ""
echo "5. monitor.sh"
echo "   Purpose: Open Istio's observability dashboards"
echo "   Usage: ./monitor.sh -d kiali"
echo "   Options:"
echo "     -d DASHBOARD : Dashboard to open (kiali, jaeger, grafana, prometheus) (default: kiali)"
echo ""
echo "6. fault-injection.sh"
echo "   Purpose: Inject faults to test service resilience"
echo "   Usage: ./fault-injection.sh -a app1 -t delay -p 50 -d 5"
echo "   Options:"
echo "     -a APP           : Application to inject faults into (app1 or app2) (default: app1)"
echo "     -t FAULT_TYPE    : Type of fault to inject (delay or abort) (default: delay)"
echo "     -p PERCENTAGE    : Percentage of requests to affect (0-100) (default: 50)"
echo "     -d DELAY_SECONDS : Seconds to delay (for delay fault type) (default: 5)"
echo "     -e ERROR_CODE    : HTTP error code to return (for abort fault type) (default: 500)"
echo "     -r               : Remove fault injection (default: false)"
echo ""
echo "7. circuit-breaker.sh"
echo "   Purpose: Implement circuit breaking to prevent cascading failures"
echo "   Usage: ./circuit-breaker.sh -a app1 -c 1 -p 1 -e 1"
echo "   Options:"
echo "     -a APP                        : Application to apply circuit breaker to (app1 or app2) (default: app1)"
echo "     -c MAX_CONNECTIONS            : Maximum number of connections to the service (default: 1)"
echo "     -p HTTP_1_MAX_PENDING_REQUESTS: Maximum number of pending HTTP requests (default: 1)"
echo "     -e CONSECUTIVE_ERRORS         : Number of consecutive errors before ejection (default: 1)"
echo "     -r                            : Remove circuit breaker (default: false)"
echo ""
echo "8. diagrams.md"
echo "   Purpose: Visual representation of the service mesh architecture"
echo "   Content: Contains Mermaid diagrams showing:"
echo "     - Overall architecture"
echo "     - Service communication flow"
echo "     - Istio components"
echo "     - Project structure"
echo "     - Traffic management"
echo "     - Canary deployments"
echo "     - Fault injection"
echo "     - Circuit breaking"
echo "     - Minikube vs GKE deployment"
echo "     - Observability stack"
echo ""
echo "For more detailed information, please refer to the README.md file."
echo ""
